import tkinter as tk
from tkinter import ttk, messagebox
import pandas as pd
from datetime import datetime
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from tkcalendar import Calendar

# Kh·ªüi t·∫°o c·ª≠a s·ªï Tkinter
root = tk.Tk()
root.title("D·ª± ƒëo√°n l∆∞·ª£ng m∆∞a")
root.geometry("650x850")
root.configure(bg="#f5f7fa")

# T·ª´ ƒëi·ªÉn √°nh x·∫°
provinces_dict = {
    1: 'Bac Lieu', 2: 'Ho Chi Minh City', 3: 'Tam Ky', 4: 'Ha Noi', 5: 'Da Nang',
    6: 'Can Tho', 7: 'Hai Phong', 8: 'Quang Nam', 9: 'Binh Duong', 10: 'Dong Nai',
    11: 'Nghe An', 12: 'Thanh Hoa', 13: 'Khanh Hoa', 14: 'Lam Dong', 15: 'Phu Yen',
    16: 'Binh Thuan', 17: 'Ninh Thuan', 18: 'Tay Ninh', 19: 'Long An', 20: 'Tien Giang',
    21: 'Ben Tre', 22: 'Tra Vinh', 23: 'Vinh Long', 24: 'Dong Thap', 25: 'An Giang',
    26: 'Kien Giang', 27: 'Ca Mau', 28: 'Soc Trang', 29: 'Bac Giang', 30: 'Bac Ninh',
    31: 'Ha Tinh', 32: 'Quang Binh', 33: 'Quang Tri', 34: 'Thua Thien Hue', 35: 'Binh Dinh',
    36: 'Gia Lai', 37: 'Kon Tum', 38: 'Dak Lak', 39: 'Dak Nong', 40: 'Ba Ria - Vung Tau'
}

wind_directions_dict = {
    1: 'ESE', 2: 'SE', 3: 'E', 4: 'WSW', 5: 'ENE', 6: 'SW', 7: 'SSE',
    8: 'SSW', 9: 'W', 10: 'NE', 11: 'NNE', 12: 'WNW', 13: 'NNW', 14: 'N'
}

# Danh s√°ch gi√° tr·ªã cho Combobox
provinces_values = list(provinces_dict.values())
wind_directions_values = list(wind_directions_dict.values())

# Style
style = ttk.Style()
style.configure("TCombobox", font=("Arial", 12), padding=5)
style.configure("TButton", font=("Arial", 13, "bold"))

# Frame ch√≠nh
main_frame = tk.Frame(root, bg="white", padx=30, pady=30, relief="groove", bd=2)
main_frame.pack(padx=30, pady=30, fill="both", expand=True)

# Ti√™u ƒë·ªÅ
title = tk.Label(main_frame, text="üöó H·ªá Th·ªëng D·ª± ƒêo√°n L∆∞·ª£ng M∆∞a", font=("Arial", 22, "bold"), fg="#2c3e50", bg="white")
title.pack(pady=10)
sub_title = tk.Label(main_frame, text="Th√¥ng tin th·ªùi ti·∫øt", font=("Arial", 14), bg="white", fg="#7f8c8d")
sub_title.pack(pady=(0, 20))

# Khung nh·∫≠p li·ªáu
form_frame = tk.Frame(main_frame, bg="white")
form_frame.pack()


def add_field(label_text, row, widget):
    label = tk.Label(form_frame, text=label_text, font=("Arial", 13), bg="white", anchor="w", width=20)
    label.grid(row=row, column=0, padx=10, pady=10, sticky="e")
    widget.grid(row=row, column=1, padx=10, pady=10, sticky="w")


# Widgets
province_cb = ttk.Combobox(form_frame, values=provinces_values, state="readonly", font=("Arial", 13), width=33)
province_cb.current(0)
add_field("T·ªânh:", 0, province_cb)

max_temp = tk.Entry(form_frame, font=("Arial", 13), width=35)
add_field("Nhi·ªát ƒë·ªô t·ªëi ƒëa (¬∞C):", 1, max_temp)

min_temp = tk.Entry(form_frame, font=("Arial", 13), width=35)
add_field("Nhi·ªát ƒë·ªô t·ªëi thi·ªÉu (¬∞C):", 2, min_temp)

wind_speed = tk.Entry(form_frame, font=("Arial", 13), width=35)
add_field("T·ªëc ƒë·ªô gi√≥ (km/h):", 3, wind_speed)

wind_cb = ttk.Combobox(form_frame, values=wind_directions_values, state="readonly", font=("Arial", 13), width=33)
wind_cb.current(0)
add_field("H∆∞·ªõng gi√≥:", 4, wind_cb)

humidity = tk.Entry(form_frame, font=("Arial", 13), width=35)
add_field("ƒê·ªô ·∫©m (%):", 5, humidity)

cloud = tk.Entry(form_frame, font=("Arial", 13), width=35)
add_field("ƒê·ªô che ph·ªß m√¢y (%):", 6, cloud)

pressure = tk.Entry(form_frame, font=("Arial", 13), width=35)
add_field("√Åp su·∫•t (hPa):", 7, pressure)

# Widget l·ªãch cho ng√†y
cal = Calendar(form_frame, selectmode="day", year=2025, month=5, day=20, date_pattern="yyyy-mm-dd")
cal.grid(row=8, column=1, padx=10, pady=10, sticky="w")
add_field("Ng√†y:", 8, cal)

# N√∫t d·ª± ƒëo√°n
predict_btn = tk.Button(main_frame, text="üîç D·ª± ƒëo√°n", bg="#3498db", fg="white", font=("Arial", 14, "bold"), width=20)
predict_btn.pack(pady=25)

# Khung k·∫øt qu·∫£
result_frame = tk.Frame(main_frame, bg="#ecf0f1", height=60)
result_frame.pack(fill="x", padx=10, pady=10)

result_label = tk.Label(result_frame, text="D·ª± ƒëo√°n l∆∞·ª£ng m∆∞a: ", font=("Arial", 14), bg="#ecf0f1", fg="#2c3e50")
result_label.pack(pady=10)

# ƒê·ªçc v√† x·ª≠ l√Ω d·ªØ li·ªáu
try:
    weather_df = pd.read_csv('Data/weather_filled_after.csv')

    # Chu·∫©n b·ªã d·ªØ li·ªáu cho m√¥ h√¨nh
    X = weather_df[['province', 'max', 'min', 'wind', 'wind_d', 'humidi', 'cloud', 'pressure', 'date']]
    y = weather_df['rain']

    # Chu·∫©n h√≥a d·ªØ li·ªáu
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    # Hu·∫•n luy·ªán m√¥ h√¨nh
    model = LinearRegression()
    model.fit(X_scaled, y)
except Exception as e:
    messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ƒë·ªçc ho·∫∑c x·ª≠ l√Ω file d·ªØ li·ªáu: {e}")
    weather_df = pd.DataFrame()
    scaler = None
    model = None


# H√†m x·ª≠ l√Ω d·ªØ li·ªáu ƒë·∫ßu v√†o
def preprocess_input():
    try:
        # L·∫•y d·ªØ li·ªáu t·ª´ c√°c tr∆∞·ªùng nh·∫≠p li·ªáu
        province = province_cb.get()
        max_temp_val = max_temp.get()
        min_temp_val = min_temp.get()
        wind_speed_val = wind_speed.get()
        wind_direction = wind_cb.get()
        humidity_val = humidity.get()
        cloud_val = cloud.get()
        pressure_val = pressure.get()
        date_str = cal.get_date()  # L·∫•y ng√†y t·ª´ widget l·ªãch

        # X√°c th·ª±c c√°c tr∆∞·ªùng s·ªë
        for val, name in [
            (max_temp_val, "Nhi·ªát ƒë·ªô t·ªëi ƒëa"),
            (min_temp_val, "Nhi·ªát ƒë·ªô t·ªëi thi·ªÉu"),
            (wind_speed_val, "T·ªëc ƒë·ªô gi√≥"),
            (humidity_val, "ƒê·ªô ·∫©m"),
            (cloud_val, "ƒê·ªô che ph·ªß m√¢y"),
            (pressure_val, "√Åp su·∫•t")
        ]:
            if not val:
                raise ValueError(f"Vui l√≤ng nh·∫≠p {name}.")
            try:
                float(val)
            except ValueError:
                raise ValueError(f"{name} ph·∫£i l√† s·ªë h·ª£p l·ªá.")

        # Chuy·ªÉn ƒë·ªïi c√°c gi√° tr·ªã s·ªë
        max_temp_val = float(max_temp_val)
        min_temp_val = float(min_temp_val)
        wind_speed_val = float(wind_speed_val)
        humidity_val = float(humidity_val)
        cloud_val = float(cloud_val)
        pressure_val = float(pressure_val)

        # √Ånh x·∫° t·ªânh v√† h∆∞·ªõng gi√≥
        province_key = [key for key, value in provinces_dict.items() if value == province][0]
        wind_direction_key = [key for key, value in wind_directions_dict.items() if value == wind_direction][0]

        # Chu·∫©n h√≥a ng√†y
        try:
            base_date = datetime(2009, 1, 1)
            date_obj = datetime.strptime(date_str, "%Y-%m-%d")
            delta_days = (date_obj - base_date).days
        except ValueError:
            raise ValueError("Ng√†y kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn ng√†y h·ª£p l·ªá t·ª´ l·ªãch.")

        # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·∫ßu v√†o
        input_data = [
            province_key,
            max_temp_val,
            min_temp_val,
            wind_speed_val,
            wind_direction_key,
            humidity_val,
            cloud_val,
            pressure_val,
            delta_days
        ]

        return input_data

    except ValueError as e:
        messagebox.showerror("L·ªói", str(e))
        return None


# H√†m d·ª± ƒëo√°n
def predict():
    if model is None or scaler is None:
        messagebox.showerror("L·ªói", "M√¥ h√¨nh ch∆∞a ƒë∆∞·ª£c hu·∫•n luy·ªán. Vui l√≤ng ki·ªÉm tra file d·ªØ li·ªáu.")
        return

    input_data = preprocess_input()
    if input_data is None:
        return

    try:
        # Chu·∫©n h√≥a d·ªØ li·ªáu ƒë·∫ßu v√†o
        input_array = np.array([input_data])
        input_scaled = scaler.transform(input_array)

        # D·ª± ƒëo√°n
        prediction = model.predict(input_scaled)[0]

        # ƒê·∫£m b·∫£o d·ª± ƒëo√°n kh√¥ng √¢m
        prediction = max(0, prediction)

        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        result_label.config(text=f"D·ª± ƒëo√°n l∆∞·ª£ng m∆∞a: {prediction:.2f} mm")
    except Exception as e:
        messagebox.showerror("L·ªói", f"L·ªói khi d·ª± ƒëo√°n: {e}")


predict_btn.config(command=predict)

root.mainloop()